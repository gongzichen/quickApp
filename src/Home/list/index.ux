<import name="cover" src="../../components/cover/index"></import>

<template>
  <refresh class="demo-page" refreshing="{{refreshing}}" onrefresh="refresh" style="progress-color: {{theme.color}}">
    <list onscrollbottom="renderMoreListItem">
      <block for="productList">
        <list-item type="item" class="item">
          <cover mess="{{cover}}" if="{{cover.id}}" for="{{cover in $item}}" :class="cover-item"></cover>
        </list-item>
      </block>
      <list-item type="loadStatus" class="load-status">
        <progress style="color: {{theme.color}}" type="circular" show="{{hasMoreData}}"></progress>
        <text class="loading" show="{{hasMoreData}}">加载更多...</text>
        <text  show="{{!hasMoreData}}">没有更多了</text>
      </list-item>
  </refresh>
</template>

<style lang="sass">
  .demo-page {
    .item {
      justify-content: center;
      width: 750px;
      .cover-item {
        /* margin: 20px; */
      }
      /* margin: 20px; */
    }
    .load-status {
      height: 80px;
      display: flex;
      justify-content: center;
      align-items: center
      /* .loading {
        text-align: center;
      } */
    }
  }

</style>

<script>
  export default {
    props: ['url'],
    data: {
      refreshing: false,
      productList: [],
      hasMoreData: true,
      // 每次渲染的商品数
      size: 20,
      // 是否正在请求数据
      isLoadingData: false,
      memList: [],
      tempList: [],
      type: '',
      theme: { color: '' },
      count: 0
    },
    onInit() {
      console.log('进来list')
      if (/movie/.test(this.url)) {
        this.type = 'subjects'
      } else if (/music/.test(this.url)) {
        this.type = 'musics'
      } else {
        this.type = 'books'
      }
      this.theme = this.$app.$def.theme
      this.loadAndRender()
    },
    // 请求数据并渲染
    loadAndRender(doRender = true) {
      this.isLoadingData = true
      // 重新请求并判断是否需要渲染列表
      this.getData(
        //  刷新数据
        function (resList) {
          this.count += 20;
          this.isLoadingData = false;
          this.refreshing = false;
          if (!resList) {
            console.error('数据请求错误')
          }
          else if (!resList.length) {
            this.hasMoreData = false
          }
          else {
            console.log('处理数据')
            this.memList = this.memList.concat(resList)
            console.log(this.memList.length)
            if (doRender) {
              this._renderList()
            }
          }
        }.bind(this)
      )
    },
    // 刷新
    refresh(evt) {
      // 刷新组件
      this.refreshing = true
      // 清空
      this.count = 0
      this.memList = []
      this.tempList = []
      this.productList = []
      // 重新请求数据
      this.loadAndRender()
    },
    // 渲染
    _renderList() {
      if (this.memList.length > 0) {
        const List = this.memList.splice(0, this.size)
        this.tempList = this.tempList.concat(List)
        this.productList = this.arrTrans(this.tempList, 3)
        console.log(JSON.stringify(this.productList[0], null, ''))
      }
      if (this.memList.length <= this.size && this.hasMoreData) {
        // 提前请求刷新数据
        this.loadAndRender(false)
      }
    },
    // 滑动到底部时加载更多
    renderMoreListItem() {
      console.log('滑动底部', this.isLoadingData)
      if (!this.isLoadingData) {
        this._renderList()
      }
    },
    // tool 数组维度转换
    arrTrans(arr, num) {
      console.log(arr)
      var newArray = new Array(Math.ceil(arr.length / num))
      for (var i = 0; i < newArray.length; i++) {
        newArray[i] = []
        for (var j = 0; j < num; j++) {
          newArray[i][j] = {}
        }
      }
      for ( var i = 0; i < arr.length; i++) {
        newArray[parseInt(i/num)][i%num] = arr[i]
      }
      return newArray
    },
    async getData(cb) {
      const data = await natives.get(this.url + '&start=' + this.count)
      const arr = JSON.parse(data.data)[this.type]
      cb(arr)  
    }
  } 
</script>